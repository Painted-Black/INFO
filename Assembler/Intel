----------Процессоры Intel в реальном режиме----------
Процессор Intel x86 после включения питания оказывается в т.н. режиме реальной адресации памяти (реальном режиме). 
Большинство ОС сразу же переводит его в защищенный режим, позволяющий им обеспечивать многозадачность, распределениепамяти и другие функкции.
Пользоваьельские программы в таких ОС часто работают еще и в режиме V86, из которого им доступно все то же, что из реального, кроме команд, относящихся к управлению защищеным режимом. 

-----Регистры процессора-----
Начиная с 80386 процессоры Intel предоставляют 16 основных регистром для пользовательских программ плюс еще 11 регистром для работы с мультимедийными приложениями (MMX) и числами с плавающей запятой (FPU, NPX). 
Из реального режима помимо основных регистров доступны также регистры управления памятью (GDTR, IDTR, TR, LDTR), регистры управления (CRO, CR1 - CR4), отладочные регистры (DR0 - DR7) и машинно-специфичные регистры, но они не применяются для решения повседневных задач. 
32-битные регистры EAX (аккумулятор), EBX (база), ECX (счетчик), EDX (регистр данных) могут использоваться без ограничений для любых целей. Младшие 16 бит каждого из этих регистров применяются как самостоятельные регистры с именами AX, BX, CX, DX. Отдельные байты в 16-битных решистрах AX-DX также могут использоваться как 8-битные регистры. Старшие байты этих регистров называются AH, BH, CH, DH, а младные -- AL, BL, CL. DL. 
Остальные четыре регистра -- ESI (индекс источника), EDI (индекс приемника), EBP (указатель базы), ESP (указатель стека) -- имеют более конкретное значение и применяются для хранения всевозможных временных переменных. 
Регистры ESI и EDI необходимы в строковых операциях, EBP т ESP -- при работе со стеком. 
Младшые половины этих четырех регистров называются SI, DI, BP, SP. 

ОС (кроме DOS) могут размещать сегменты, с которыми работает программа пользователя, в разных местах памяти и даже временно записывать их на диск, если памяти не хватает. 
Так как сегменты способны оказаться где угодно, программа образается к ним, применяя вместо настоящего адреса сегмента 16-битное число, называемое селектором. В процессорах Intel предусмотрено шесть 16-битных регистров -- CS, DS, ES, FS, GS, SS, где хранятся селекторы. 
CS, DS, ES, FS -- регистры сегментов данных. Регистры CS и SS отвечают за сегмент кода и сегмент стека.

-----Стек-----
Стек -- организованный специальным образом участок памяти, который искользуется для временного хранения переменных, передачи параметров вызываемым подпрограммам и сохранения адреса возврата при вызове процедур и прерываний. 
Стек располагается в сегменте памяти, описываемом регистром SS, текущее смещение вершины стека отражено в регистре ESP. 

-----Регистр флагов-----
В EFLAGS каждый бит является флагом. Его младшие 16 бит называюстя FLAGS. Все флаги, расположенные в старшем слове регистра, имеют отношение к управлению защищенным режимом. 
        1. CF -- флаг переноса.
            Устанавливается в 1, если результат предыдущей операции не уместился в приемнике и произошел перенос из старшего бита или если требуется заем, иначе в 0.
        2. PF -- флаг четности
        3. AF -- флаг полупереноса или вспомогательного переноса
        4. ZF -- флаг нуля
        5. SF -- флаг знака
        6. TF -- флаг ловушки
            Для работы отладчиков, не использующих защищенный режим. Установка его в 1 приводит к тому, что после выполнения каждой программной команды управление временно передается отладчику. 
        7. IF -- флаг прерываний
            Сброс его в 0 приводит к тому, что процессор перестает обрабатывать прерывания от внешних устройств. 
        8. DF -- флаг направления
            Контролирует поведения команд обработки строк: когда он установлен в 1, строки обрабатываюся в сторону уменьшения адресов, когда в 0 -- наоборот.
        9. OF -- флаг переполнения
Флаги IOPL (уровень привелегий ввода-вывода) и NT (вложенная задача) применяются в защищенном режиме. 

-----Способы адресации-----
Большинство команд процессора вызываются с аргументами, которые в ассемблере называют операндами. 
        1. Регистровая адресация. 
            Операнды могут располагаться в любых регистрах общего назначения и сегментных регистрах.
        2. Непосредственная адресация.
            Некоторые команды позволяют указывать один из операндов непосредственно в тексте программы.
        3. Прямая адресация.
            Если у операнда, располагающегося в памяти, известен адрес, то его можно использовать.
        4. Косвенная адресация.
        5. Адресацияпобазе со сдвигом.
        6. Косвенная адресация с масштабированием.
        7. Адресация по базе с индексированием.
        8. Адресация по базе с индексированием и масштабированием.
